#!/usr/bin/env python

import argparse
import subprocess
from time import sleep

FIGURE_SPACE = " "


def default_interface():
    process = subprocess.run(
        ["ip", "route"], check=True, text=True, capture_output=True
    )
    for line in process.stdout.splitlines():
        if line.startswith("default via"):
            return line.split()[4]
    raise RuntimeError("No default interface found")


def get_rx_tx_bytes(iface):
    with open("/proc/net/dev") as f:
        for line in f:
            if not line.startswith(f"{iface}:"):
                continue
            rx_bytes = int(line.split()[1])
            tx_bytes = int(line.split()[9])
            return rx_bytes, tx_bytes
    raise RuntimeError("Interface not found")


def format_size(size, min_threshold=1024):
    power_labels = {0: "B", 1: "K", 2: "M", 3: "G", 4: "T"}
    kilo = 2**10

    power = 0
    significand = size
    while significand > kilo:
        significand /= kilo
        power += 1

    # Round significand to 0 to reduce constant chatter.
    if size < min_threshold:
        significand = 0
        power += 1

    return f"{significand:3.0f}".replace(" ", FIGURE_SPACE) + f" {power_labels[power]}"


def build_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument("--rx_icon", default=" ", help="Icon for received bytes")
    parser.add_argument("--tx_icon", default=" ", help="Icon for transmitted bytes")
    parser.add_argument("--num_left", default="", help="Text left of number.")
    parser.add_argument("--num_right", default="", help="Text right of number.")
    parser.add_argument(
        "--refresh_interval", type=float, default=2, help="Refresh interval in seconds"
    )
    return parser


def main():
    parser = build_parser()
    args = parser.parse_args()

    fmt_str = (
        f"{args.rx_icon}{args.num_left}{{rx}}{args.num_right}  "
        f"{args.tx_icon}{args.num_left}{{tx}}{args.num_right}"
    )
    iface = default_interface()

    rx_bytes, tx_bytes = get_rx_tx_bytes(iface)

    while True:
        prev_rx_bytes, prev_tx_bytes = rx_bytes, tx_bytes
        rx_bytes, tx_bytes = get_rx_tx_bytes(iface)
        drx = format_size((rx_bytes - prev_rx_bytes) / args.refresh_interval)
        dtx = format_size((tx_bytes - prev_tx_bytes) / args.refresh_interval)
        line = fmt_str.format(rx=drx, tx=dtx)
        print(line, flush=True)
        sleep(args.refresh_interval)


if __name__ == "__main__":
    main()
