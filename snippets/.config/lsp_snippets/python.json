{
  "def": {
    "prefix": "d",
    "body": "def "
  },
  "def __init__(self)": {
    "prefix": "_i",
    "body": "def __init__(self):\n\t${0:pass}\n"
  },
  "for ... in": {
    "prefix": "fo",
    "body": "for $1 in $2:\n\t$0"
  },
  "for i in range()": {
    "prefix": "fi",
    "body": "for i in range($1)$0"
  },
  "for i, x in enumerate()": {
    "prefix": "fe",
    "body": "for i, ${1:x} in enumerate(${2:xs})$0"
  },
  "for k, v in d.items()": {
    "prefix": "fd",
    "body": "for ${2:k}, ${3:v} in ${1:d}.items()$0"
  },
  "for x in": {
    "prefix": "fx",
    "body": "for x in ${1:xs}$0"
  },
  "from ... import ...": {
    "prefix": "f",
    "body": "from $1 import $0"
  },
  "if __name__": {
    "prefix": "_m",
    "body": [
      "if __name__ == \"__main__\":",
      "\tmain()"
    ]
  },
  "import matplotlib.pyplot": {
    "prefix": "iplt",
    "body": "import matplotlib.pyplot as plt"
  },
  "import numpy": {
    "prefix": "inp",
    "body": "import numpy as np"
  },
  "import pandas": {
    "prefix": "ipd",
    "body": "import pandas as pd"
  },
  "import tensorflow": {
    "prefix": "itf",
    "body": "import tensorflow as tf"
  },
  "import torch": {
    "prefix": "it",
    "body": [
      "import torch",
      "import torch.nn as nn",
      "import torch.nn.functional as F"
    ]
  },
  "import torch.nn": {
    "prefix": "itn",
    "body": "import torch.nn as nn"
  },
  "import torch.nn.functional": {
    "prefix": "itnf",
    "body": "import torch.nn.functional as F"
  },
  "plt.plot": {
    "prefix": "plt",
    "body": [
      "fig, ax = plt.subplots()",
      "ax.plot(x, y)",
      "fig.savefig(${1:filename}, dpi=300)"
    ]
  },
  "print": {
    "prefix": "pr",
    "body": "print(${1:x})"
  },
  "print(\"\")": {
    "prefix": "ps",
    "body": "print(\"${1:}\")"
  },
  "print(f\"\")": {
    "prefix": "pf",
    "body": "print(f\"${1:}\")"
  },
  "raise NotImplementedError": {
    "prefix": "nie",
    "body": "raise NotImplementedError"
  },
  "self": {
    "prefix": "s",
    "body": "self."
  },
  "self.x = x": {
    "prefix": "a",
    "body": "self.${1:} = ${1:}"
  },
  "with open(...) as f": {
    "prefix": "wo",
    "body": "with open($1) as f:\n\t$0"
  },
  "with open(...) as f: lines = f.read().splitlines()": {
    "prefix": "wol",
    "body": "with open($1) as f:\n\tlines = f.read().splitlines()\n$0"
  },
  "with open(...) as f: json.dump()": {
    "prefix": "wojd",
    "body": "with open($1, \"w\") as f:\n\t${2:data} = json.load(f)\n$0"
  },
  "with open(...) as f: json.load()": {
    "prefix": "wojl",
    "body": "with open($1) as f:\n\t${2:data} = json.load(f)\n$0"
  },
  "class Module(nn.Module)": {
    "prefix": "cnn",
    "body": [
      "class Module(nn.Module):",
      "\tdef __init__(self):",
      "\t\tsuper().__init__()",
      "",
      "\tdef forward(self, x: Tensor) -> Tensor:",
      "\t\treturn x"
    ]
  }
}
